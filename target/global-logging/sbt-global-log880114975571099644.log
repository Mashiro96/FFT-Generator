[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\13935\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\13935\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.2 (Oracle Corporation Java 1.8.0_301)
[debug]       Load.loadUnit: plugins took 68.9654ms
[debug]       Load.loadUnit: defsScala took 0.2402ms
[debug] [Loading] Scanning directory C:\Users\13935\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\13935\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.8279 ms
[debug]           Load.resolveProject(global-plugins) took 36.4343ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\13935\.sbt\1.0\plugins, plugins: List(<none>))) took 71.4728ms
[debug] [Loading] Done in C:\Users\13935\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 95.8338ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2251ms
[debug]     Load.loadUnit(file:/C:/Users/13935/.sbt/1.0/plugins/, ...) took 170.8051ms
[debug]   Load.apply: load took 296.7887ms
[debug]   Load.apply: resolveProjects took 4.8386ms
[debug]   Load.apply: finalTransforms took 39.5379ms
[debug]   Load.apply: config.delegates took 5.6342ms
[debug]   Load.apply: Def.make(settings)... took 299.9013ms
[debug]   Load.apply: structureIndex took 76.879ms
[debug]   Load.apply: mkStreams took 1.424ms
[info] loading global plugins from C:\Users\13935\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 88086.619ms
[debug]           Load.loadUnit: plugins took 17.2978ms
[debug]           Load.loadUnit: defsScala took 0.0022ms
[debug] [Loading] Scanning directory G:\FFT_generator(1)\FFT_generator\project
[debug]             Load.loadUnit: mkEval took 5.9035ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in G:\FFT_generator(1)\FFT_generator\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.0073 ms
[info] loading settings for project fft_generator-build from plugins.sbt,idea.sbt ...
[debug]               Load.resolveProject(fft_generator-build) took 4.7594ms
[debug]             Load.loadTransitive: finalizeProject(Project(id fft_generator-build, base: G:\FFT_generator(1)\FFT_generator\project, plugins: List(<none>))) took 6.0862ms
[debug] [Loading] Done in G:\FFT_generator(1)\FFT_generator\project, returning: (fft_generator-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1630.863ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.5164ms
[debug]         Load.loadUnit(file:/G:/FFT_generator(1)/FFT_generator/project/, ...) took 1652.174ms
[debug]       Load.apply: load took 1652.8302ms
[debug]       Load.apply: resolveProjects took 0.0712ms
[debug]       Load.apply: finalTransforms took 5.6402ms
[debug]       Load.apply: config.delegates took 0.2152ms
[debug]       Load.apply: Def.make(settings)... took 40.1739ms
[debug]       Load.apply: structureIndex took 14.5709ms
[debug]       Load.apply: mkStreams took 0.0021ms
[info] loading project definition from G:\FFT_generator(1)\FFT_generator\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5489.5917ms
[debug]     Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory G:\FFT_generator(1)\FFT_generator
[debug]       Load.loadUnit: mkEval took 0.1283ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in G:\FFT_generator(1)\FFT_generator, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.1614 ms
[info] loading settings for project fft_generator from build.sbt ...
[debug]         Load.resolveProject(fft_generator) took 21.0567ms
[debug]       Load.loadTransitive: finalizeProject(Project(id fft_generator, base: G:\FFT_generator(1)\FFT_generator, plugins: List(<none>))) took 22.9356ms
[debug] [Loading] Done in G:\FFT_generator(1)\FFT_generator, returning: (fft_generator)
[debug]     Load.loadUnit: loadedProjectsRaw took 1438.3118ms
[debug]     Load.loadUnit: cleanEvalClasses took 17.7699ms
[debug]   Load.loadUnit(file:/G:/FFT_generator(1)/FFT_generator/, ...) took 6946.1749ms
[debug] Load.apply: load took 6947.0643ms
[debug] Load.apply: resolveProjects took 0.0866ms
[debug] Load.apply: finalTransforms took 16.0092ms
[debug] Load.apply: config.delegates took 0.1865ms
[debug] Load.apply: Def.make(settings)... took 37.3125ms
[debug] Load.apply: structureIndex took 13.9943ms
[debug] Load.apply: mkStreams took 0.0018ms
[info] set current project to chisel-module-template (in build file:/G:/FFT_generator(1)/FFT_generator/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 1372 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 1372, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to chisel-module-template (in build file:/G:/FFT_generator(1)/FFT_generator/)
[debug] > Exec(idea-shell, None, None)
